Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> comandos
Rule 2     comandos -> <empty>
Rule 3     comandos -> comando comandos
Rule 4     comando -> LEX
Rule 5     comando -> YACC
Rule 6     comando -> code
Rule 7     comando -> COMMENTARY
Rule 8     code -> PARAMETER = CODE_EXPRESSION
Rule 9     code -> TOKEN_ID extra CODE_EXPRESSION
Rule 10    extra -> <empty>
Rule 11    extra -> STR_ATRIB extra
Rule 12    extra -> SIGNAL extra
Rule 13    code -> GRAMMAR CODE_EXPRESSION
Rule 14    code -> CODE_EXPRESSION

Terminals, with rules where they appear

=                    : 8
CODE_EXPRESSION      : 8 9 13 14
COMMENTARY           : 7
GRAMMAR              : 13
LEX                  : 4
PARAMETER            : 8
SIGNAL               : 12
STR_ATRIB            : 11
TOKEN_ID             : 9
YACC                 : 5
error                : 

Nonterminals, with rules where they appear

code                 : 6
comando              : 3
comandos             : 1 3
extra                : 9 11 12
prog                 : 0

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . comandos
    (2) comandos -> .
    (3) comandos -> . comando comandos
    (4) comando -> . LEX
    (5) comando -> . YACC
    (6) comando -> . code
    (7) comando -> . COMMENTARY
    (8) code -> . PARAMETER = CODE_EXPRESSION
    (9) code -> . TOKEN_ID extra CODE_EXPRESSION
    (13) code -> . GRAMMAR CODE_EXPRESSION
    (14) code -> . CODE_EXPRESSION

    $end            reduce using rule 2 (comandos -> .)
    LEX             shift and go to state 4
    YACC            shift and go to state 5
    COMMENTARY      shift and go to state 7
    PARAMETER       shift and go to state 8
    TOKEN_ID        shift and go to state 10
    GRAMMAR         shift and go to state 11
    CODE_EXPRESSION shift and go to state 9

    prog                           shift and go to state 1
    comandos                       shift and go to state 2
    comando                        shift and go to state 3
    code                           shift and go to state 6

state 1

    (0) S' -> prog .



state 2

    (1) prog -> comandos .

    $end            reduce using rule 1 (prog -> comandos .)


state 3

    (3) comandos -> comando . comandos
    (2) comandos -> .
    (3) comandos -> . comando comandos
    (4) comando -> . LEX
    (5) comando -> . YACC
    (6) comando -> . code
    (7) comando -> . COMMENTARY
    (8) code -> . PARAMETER = CODE_EXPRESSION
    (9) code -> . TOKEN_ID extra CODE_EXPRESSION
    (13) code -> . GRAMMAR CODE_EXPRESSION
    (14) code -> . CODE_EXPRESSION

    $end            reduce using rule 2 (comandos -> .)
    LEX             shift and go to state 4
    YACC            shift and go to state 5
    COMMENTARY      shift and go to state 7
    PARAMETER       shift and go to state 8
    TOKEN_ID        shift and go to state 10
    GRAMMAR         shift and go to state 11
    CODE_EXPRESSION shift and go to state 9

    comando                        shift and go to state 3
    comandos                       shift and go to state 12
    code                           shift and go to state 6

state 4

    (4) comando -> LEX .

    LEX             reduce using rule 4 (comando -> LEX .)
    YACC            reduce using rule 4 (comando -> LEX .)
    COMMENTARY      reduce using rule 4 (comando -> LEX .)
    PARAMETER       reduce using rule 4 (comando -> LEX .)
    TOKEN_ID        reduce using rule 4 (comando -> LEX .)
    GRAMMAR         reduce using rule 4 (comando -> LEX .)
    CODE_EXPRESSION reduce using rule 4 (comando -> LEX .)
    $end            reduce using rule 4 (comando -> LEX .)


state 5

    (5) comando -> YACC .

    LEX             reduce using rule 5 (comando -> YACC .)
    YACC            reduce using rule 5 (comando -> YACC .)
    COMMENTARY      reduce using rule 5 (comando -> YACC .)
    PARAMETER       reduce using rule 5 (comando -> YACC .)
    TOKEN_ID        reduce using rule 5 (comando -> YACC .)
    GRAMMAR         reduce using rule 5 (comando -> YACC .)
    CODE_EXPRESSION reduce using rule 5 (comando -> YACC .)
    $end            reduce using rule 5 (comando -> YACC .)


state 6

    (6) comando -> code .

    LEX             reduce using rule 6 (comando -> code .)
    YACC            reduce using rule 6 (comando -> code .)
    COMMENTARY      reduce using rule 6 (comando -> code .)
    PARAMETER       reduce using rule 6 (comando -> code .)
    TOKEN_ID        reduce using rule 6 (comando -> code .)
    GRAMMAR         reduce using rule 6 (comando -> code .)
    CODE_EXPRESSION reduce using rule 6 (comando -> code .)
    $end            reduce using rule 6 (comando -> code .)


state 7

    (7) comando -> COMMENTARY .

    LEX             reduce using rule 7 (comando -> COMMENTARY .)
    YACC            reduce using rule 7 (comando -> COMMENTARY .)
    COMMENTARY      reduce using rule 7 (comando -> COMMENTARY .)
    PARAMETER       reduce using rule 7 (comando -> COMMENTARY .)
    TOKEN_ID        reduce using rule 7 (comando -> COMMENTARY .)
    GRAMMAR         reduce using rule 7 (comando -> COMMENTARY .)
    CODE_EXPRESSION reduce using rule 7 (comando -> COMMENTARY .)
    $end            reduce using rule 7 (comando -> COMMENTARY .)


state 8

    (8) code -> PARAMETER . = CODE_EXPRESSION

    =               shift and go to state 13


state 9

    (14) code -> CODE_EXPRESSION .

    LEX             reduce using rule 14 (code -> CODE_EXPRESSION .)
    YACC            reduce using rule 14 (code -> CODE_EXPRESSION .)
    COMMENTARY      reduce using rule 14 (code -> CODE_EXPRESSION .)
    PARAMETER       reduce using rule 14 (code -> CODE_EXPRESSION .)
    TOKEN_ID        reduce using rule 14 (code -> CODE_EXPRESSION .)
    GRAMMAR         reduce using rule 14 (code -> CODE_EXPRESSION .)
    CODE_EXPRESSION reduce using rule 14 (code -> CODE_EXPRESSION .)
    $end            reduce using rule 14 (code -> CODE_EXPRESSION .)


state 10

    (9) code -> TOKEN_ID . extra CODE_EXPRESSION
    (10) extra -> .
    (11) extra -> . STR_ATRIB extra
    (12) extra -> . SIGNAL extra

    CODE_EXPRESSION reduce using rule 10 (extra -> .)
    STR_ATRIB       shift and go to state 15
    SIGNAL          shift and go to state 16

    extra                          shift and go to state 14

state 11

    (13) code -> GRAMMAR . CODE_EXPRESSION

    CODE_EXPRESSION shift and go to state 17


state 12

    (3) comandos -> comando comandos .

    $end            reduce using rule 3 (comandos -> comando comandos .)


state 13

    (8) code -> PARAMETER = . CODE_EXPRESSION

    CODE_EXPRESSION shift and go to state 18


state 14

    (9) code -> TOKEN_ID extra . CODE_EXPRESSION

    CODE_EXPRESSION shift and go to state 19


state 15

    (11) extra -> STR_ATRIB . extra
    (10) extra -> .
    (11) extra -> . STR_ATRIB extra
    (12) extra -> . SIGNAL extra

    CODE_EXPRESSION reduce using rule 10 (extra -> .)
    STR_ATRIB       shift and go to state 15
    SIGNAL          shift and go to state 16

    extra                          shift and go to state 20

state 16

    (12) extra -> SIGNAL . extra
    (10) extra -> .
    (11) extra -> . STR_ATRIB extra
    (12) extra -> . SIGNAL extra

    CODE_EXPRESSION reduce using rule 10 (extra -> .)
    STR_ATRIB       shift and go to state 15
    SIGNAL          shift and go to state 16

    extra                          shift and go to state 21

state 17

    (13) code -> GRAMMAR CODE_EXPRESSION .

    LEX             reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    YACC            reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    COMMENTARY      reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    PARAMETER       reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    TOKEN_ID        reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    GRAMMAR         reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    CODE_EXPRESSION reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)
    $end            reduce using rule 13 (code -> GRAMMAR CODE_EXPRESSION .)


state 18

    (8) code -> PARAMETER = CODE_EXPRESSION .

    LEX             reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    YACC            reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    COMMENTARY      reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    PARAMETER       reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    TOKEN_ID        reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    GRAMMAR         reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    CODE_EXPRESSION reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)
    $end            reduce using rule 8 (code -> PARAMETER = CODE_EXPRESSION .)


state 19

    (9) code -> TOKEN_ID extra CODE_EXPRESSION .

    LEX             reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    YACC            reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    COMMENTARY      reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    PARAMETER       reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    TOKEN_ID        reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    GRAMMAR         reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    CODE_EXPRESSION reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)
    $end            reduce using rule 9 (code -> TOKEN_ID extra CODE_EXPRESSION .)


state 20

    (11) extra -> STR_ATRIB extra .

    CODE_EXPRESSION reduce using rule 11 (extra -> STR_ATRIB extra .)


state 21

    (12) extra -> SIGNAL extra .

    CODE_EXPRESSION reduce using rule 12 (extra -> SIGNAL extra .)

