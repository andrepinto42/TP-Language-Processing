Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INT
    PRECEDENCE
    YACC

Grammar

Rule 0     S' -> prog
Rule 1     prog -> comandos
Rule 2     comandos -> <empty>
Rule 3     comandos -> comandos comando
Rule 4     comando -> atrib
Rule 5     comando -> LEX
Rule 6     atrib -> LITERALS = STR_ATRIB
Rule 7     atrib -> IGNORE = STR_ATRIB
Rule 8     atrib -> TOKENS = STR_ATRIB
Rule 9     atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION
Rule 10    atrib -> TOKEN_ID CODE_EXPRESSION

Terminals, with rules where they appear

=                    : 6 7 8
CODE_EXPRESSION      : 9 10
IGNORE               : 7
INT                  : 
LEX                  : 5
LITERALS             : 6
PRECEDENCE           : 
STR_ATRIB            : 6 7 8 9
TOKENS               : 8
TOKEN_ID             : 9 10
YACC                 : 
error                : 

Nonterminals, with rules where they appear

atrib                : 4
comando              : 3
comandos             : 1 3
prog                 : 0

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . comandos
    (2) comandos -> .
    (3) comandos -> . comandos comando

    LEX             reduce using rule 2 (comandos -> .)
    LITERALS        reduce using rule 2 (comandos -> .)
    IGNORE          reduce using rule 2 (comandos -> .)
    TOKENS          reduce using rule 2 (comandos -> .)
    TOKEN_ID        reduce using rule 2 (comandos -> .)
    $end            reduce using rule 2 (comandos -> .)

    prog                           shift and go to state 1
    comandos                       shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> comandos .
    (3) comandos -> comandos . comando
    (4) comando -> . atrib
    (5) comando -> . LEX
    (6) atrib -> . LITERALS = STR_ATRIB
    (7) atrib -> . IGNORE = STR_ATRIB
    (8) atrib -> . TOKENS = STR_ATRIB
    (9) atrib -> . TOKEN_ID STR_ATRIB CODE_EXPRESSION
    (10) atrib -> . TOKEN_ID CODE_EXPRESSION

    $end            reduce using rule 1 (prog -> comandos .)
    LEX             shift and go to state 5
    LITERALS        shift and go to state 6
    IGNORE          shift and go to state 7
    TOKENS          shift and go to state 8
    TOKEN_ID        shift and go to state 9

    comando                        shift and go to state 3
    atrib                          shift and go to state 4

state 3

    (3) comandos -> comandos comando .

    LEX             reduce using rule 3 (comandos -> comandos comando .)
    LITERALS        reduce using rule 3 (comandos -> comandos comando .)
    IGNORE          reduce using rule 3 (comandos -> comandos comando .)
    TOKENS          reduce using rule 3 (comandos -> comandos comando .)
    TOKEN_ID        reduce using rule 3 (comandos -> comandos comando .)
    $end            reduce using rule 3 (comandos -> comandos comando .)


state 4

    (4) comando -> atrib .

    LEX             reduce using rule 4 (comando -> atrib .)
    LITERALS        reduce using rule 4 (comando -> atrib .)
    IGNORE          reduce using rule 4 (comando -> atrib .)
    TOKENS          reduce using rule 4 (comando -> atrib .)
    TOKEN_ID        reduce using rule 4 (comando -> atrib .)
    $end            reduce using rule 4 (comando -> atrib .)


state 5

    (5) comando -> LEX .

    LEX             reduce using rule 5 (comando -> LEX .)
    LITERALS        reduce using rule 5 (comando -> LEX .)
    IGNORE          reduce using rule 5 (comando -> LEX .)
    TOKENS          reduce using rule 5 (comando -> LEX .)
    TOKEN_ID        reduce using rule 5 (comando -> LEX .)
    $end            reduce using rule 5 (comando -> LEX .)


state 6

    (6) atrib -> LITERALS . = STR_ATRIB

    =               shift and go to state 10


state 7

    (7) atrib -> IGNORE . = STR_ATRIB

    =               shift and go to state 11


state 8

    (8) atrib -> TOKENS . = STR_ATRIB

    =               shift and go to state 12


state 9

    (9) atrib -> TOKEN_ID . STR_ATRIB CODE_EXPRESSION
    (10) atrib -> TOKEN_ID . CODE_EXPRESSION

    STR_ATRIB       shift and go to state 13
    CODE_EXPRESSION shift and go to state 14


state 10

    (6) atrib -> LITERALS = . STR_ATRIB

    STR_ATRIB       shift and go to state 15


state 11

    (7) atrib -> IGNORE = . STR_ATRIB

    STR_ATRIB       shift and go to state 16


state 12

    (8) atrib -> TOKENS = . STR_ATRIB

    STR_ATRIB       shift and go to state 17


state 13

    (9) atrib -> TOKEN_ID STR_ATRIB . CODE_EXPRESSION

    CODE_EXPRESSION shift and go to state 18


state 14

    (10) atrib -> TOKEN_ID CODE_EXPRESSION .

    LEX             reduce using rule 10 (atrib -> TOKEN_ID CODE_EXPRESSION .)
    LITERALS        reduce using rule 10 (atrib -> TOKEN_ID CODE_EXPRESSION .)
    IGNORE          reduce using rule 10 (atrib -> TOKEN_ID CODE_EXPRESSION .)
    TOKENS          reduce using rule 10 (atrib -> TOKEN_ID CODE_EXPRESSION .)
    TOKEN_ID        reduce using rule 10 (atrib -> TOKEN_ID CODE_EXPRESSION .)
    $end            reduce using rule 10 (atrib -> TOKEN_ID CODE_EXPRESSION .)


state 15

    (6) atrib -> LITERALS = STR_ATRIB .

    LEX             reduce using rule 6 (atrib -> LITERALS = STR_ATRIB .)
    LITERALS        reduce using rule 6 (atrib -> LITERALS = STR_ATRIB .)
    IGNORE          reduce using rule 6 (atrib -> LITERALS = STR_ATRIB .)
    TOKENS          reduce using rule 6 (atrib -> LITERALS = STR_ATRIB .)
    TOKEN_ID        reduce using rule 6 (atrib -> LITERALS = STR_ATRIB .)
    $end            reduce using rule 6 (atrib -> LITERALS = STR_ATRIB .)


state 16

    (7) atrib -> IGNORE = STR_ATRIB .

    LEX             reduce using rule 7 (atrib -> IGNORE = STR_ATRIB .)
    LITERALS        reduce using rule 7 (atrib -> IGNORE = STR_ATRIB .)
    IGNORE          reduce using rule 7 (atrib -> IGNORE = STR_ATRIB .)
    TOKENS          reduce using rule 7 (atrib -> IGNORE = STR_ATRIB .)
    TOKEN_ID        reduce using rule 7 (atrib -> IGNORE = STR_ATRIB .)
    $end            reduce using rule 7 (atrib -> IGNORE = STR_ATRIB .)


state 17

    (8) atrib -> TOKENS = STR_ATRIB .

    LEX             reduce using rule 8 (atrib -> TOKENS = STR_ATRIB .)
    LITERALS        reduce using rule 8 (atrib -> TOKENS = STR_ATRIB .)
    IGNORE          reduce using rule 8 (atrib -> TOKENS = STR_ATRIB .)
    TOKENS          reduce using rule 8 (atrib -> TOKENS = STR_ATRIB .)
    TOKEN_ID        reduce using rule 8 (atrib -> TOKENS = STR_ATRIB .)
    $end            reduce using rule 8 (atrib -> TOKENS = STR_ATRIB .)


state 18

    (9) atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .

    LEX             reduce using rule 9 (atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .)
    LITERALS        reduce using rule 9 (atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .)
    IGNORE          reduce using rule 9 (atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .)
    TOKENS          reduce using rule 9 (atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .)
    TOKEN_ID        reduce using rule 9 (atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .)
    $end            reduce using rule 9 (atrib -> TOKEN_ID STR_ATRIB CODE_EXPRESSION .)

